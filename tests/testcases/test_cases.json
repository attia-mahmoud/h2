[
  {
    "id": 132,
    "description": "Other frames (from any stream) MUST NOT occur between the HEADERS frame and any CONTINUATION frames that might follow.",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "raw_payload": true,
        "flags": [],
        "headers": {
          "pseudo_headers": {
            ":method": "GET",
            ":path": "/"
          }
        }
      },
      {
        "type": "DATA",
        "stream_id": 3,
        "flags": ["END_STREAM"],
        "data": "Hello"
      },
      {
        "type": "CONTINUATION",
        "stream_id": 1,
        "raw_payload": true,
        "flags": ["END_HEADERS"],
        "headers": {
          "pseudo_headers": {
            ":scheme": "http",
            ":authority": "example.com"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 147,
    "description": "An endpoint MUST NOT generate an HTTP/2 message containing connection-specific header fields.",
    "client_frames": [
      {
        "type": "HEADERS",
        "flags": [
          "END_STREAM"
        ],
        "stream_id": 1,
        "headers": {
          "pseudo_headers": {
            "method": "GET",
            "scheme": "http",
            "path": "/",
            "authority": "localhost"
          },
          "regular_headers": {
            "connection": "keep-alive"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 148,
    "description": "The only exception to this is the TE header field, which MAY be present in an HTTP/2 request; when it is, it MUST NOT contain any value other than \"trailers\".",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "headers": {
          "pseudo_headers": {
            "method": "GET",
            "scheme": "http",
            "path": "/",
            "authority": "example.com"
          },
          "regular_headers": {
            "te": "gzip"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 152,
    "description": "Pseudo-header fields are not HTTP header fields. Endpoints MUST NOT generate pseudo-header fields other than those defined in this document.",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "headers": {
          "pseudo_headers": {
            "method": "GET",
            "scheme": "http",
            "path": "/",
            "authority": "example.com",
            "version": "2.0"
          },
          "regular_headers": {
            "user-agent": "test-client"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 153,
    "description": "Pseudo-header fields defined for requests MUST NOT appear in responses.",
    "server_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "headers": {
          "pseudo_headers": {
            "status": "200",
            "method": "GET"
          },
          "regular_headers": {
            "server": "test-server"
          }
        }
      }
    ],
    "client_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 154,
    "description": "Pseudo-header fields defined for responses MUST NOT appear in requests.",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "headers": {
          "pseudo_headers": {
            "method": "GET",
            "scheme": "http",
            "path": "/",
            "authority": "example.com",
            "status": "200"
          },
          "regular_headers": {
            "user-agent": "test-client"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 157,
    "description": "All pseudo-header fields MUST appear in a field block before all regular field lines. Any request or response that contains a pseudo-header field that appears in a field block after a regular field line MUST be treated as malformed (Section 8.1.1).",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "custom_headers": [
          {":method": "GET"},
          {":scheme": "http"},
          {"user-agent": "test-client"},
          {"accept": "*/*"},
          {":path": "/"},
          {":authority": "example.com"}
        ]
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 158,
    "description": "The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1).",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "custom_headers": [
          {":method": "GET"},
          {":scheme": "http"},
          {":path": "/"},
          {":path": "/index.html"},
          {":authority": "example.com"}
        ]
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 161,
    "description": "Clients MUST NOT generate a request with a Host header field that differs from the \":authority\" pseudo-header field.",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "headers": {
          "pseudo_headers": {
            "method": "GET",
            "scheme": "http",
            "path": "/",
            "authority": "example.com"
          },
          "regular_headers": {
            "host": "nopasaran.com"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 165,
    "description": "':authority' MUST NOT include the deprecated userinfo subcomponent for \"http\" or \"https\" schemed URIs.",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "headers": {
          "pseudo_headers": {
            "method": "GET",
            "scheme": "http",
            "path": "/",
            "authority": "user@example.com"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 167,
    "description": "This pseudo-header field MUST NOT be empty for \"http\" or \"https\" URIs; \"http\" or \"https\" URIs that do not contain a path component MUST include a value of '/'. The exceptions to this rule are: an OPTIONS request for an \"http\" or \"https\" URI that does not include a path component; these MUST include a \":path\" pseudo-header field with a value of '*'.",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "headers": {
          "pseudo_headers": {
            "method": "GET",
            "scheme": "http",
            "path": "",
            "authority": "example.com"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 168,
    "description": "All HTTP/2 requests MUST include exactly one valid value for the \":method\", \":scheme\", and \":path\" pseudo-header fields, unless they are CONNECT requests (Section 8.5). An HTTP request that omits mandatory pseudo-header fields is malformed (Section 8.1.1).",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "headers": {
          "pseudo_headers": {
            "path": "/",
            "method": "GET"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 169,
    "description": "For HTTP/2 responses, a single \":status\" pseudo-header field is defined that carries the HTTP status code field. This pseudo-header field MUST be included in all responses, including interim responses; otherwise, the response is malformed.",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "headers": {
          "pseudo_headers": {
            "path": "/",
            "method": "GET"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "raw_payload": true,
        "headers": {
          "pseudo_headers": {},
          "regular_headers": {
            "content-type": "text/plain"
          }
        }
      }
    ]
  },
  {
    "id": 171,
    "description": "Promised requests cannot include any content or a trailer section. Clients that receive a promised request that is not cacheable, that is not known to be safe, or that indicates the presence of request content MUST reset the promised stream with a stream error (Section 5.4.2) of type PROTOCOL_ERROR.",
    "client_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {
          "SETTINGS_ENABLE_PUSH": 1
        }
      }
    ],
    "server_frames": [
      {
        "type": "PUSH_PROMISE",
        "stream_id": 1,
        "promised_stream_id": 2,
        "flags": ["END_HEADERS"],
        "headers": {
          "pseudo_headers": {
            "method": "POST",
            "scheme": "https",
            "path": "/resource",
            "authority": "example.com"
          }
        }
      }
    ]
  },
  {
    "id": 175,
    "description": "A client cannot push. Thus, servers MUST treat the receipt of a PUSH_PROMISE frame as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.",
    "client_frames": [
      {
        "type": "PUSH_PROMISE",
        "stream_id": 1,
        "promised_stream_id": 2,
        "flags": ["END_HEADERS"],
        "headers": {
          "pseudo_headers": {
            "method": "GET",
            "scheme": "https",
            "path": "/resource",
            "authority": "example.com"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 176,
    "description": "The header fields in PUSH_PROMISE and any subsequent CONTINUATION frames MUST be a valid and complete set of request header fields (Section 8.3.1).",
    "client_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {
          "SETTINGS_ENABLE_PUSH": 1
        }
      }
    ],
    "server_frames": [
      {
        "type": "PUSH_PROMISE",
        "stream_id": 1,
        "promised_stream_id": 2,
        "flags": ["END_HEADERS"],
        "headers": {
          "pseudo_headers": {
            "scheme": "https",
            "path": "/resource"
          }
        }
      }
    ]
  },
  {
    "id": 177,
    "description": "The server MUST include a method in the \":method\" pseudo-header field that is safe and cacheable.",
    "client_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {
          "SETTINGS_ENABLE_PUSH": 1
        }
      }
    ],
    "server_frames": [
      {
        "type": "PUSH_PROMISE",
        "stream_id": 1,
        "promised_stream_id": 2,
        "flags": ["END_HEADERS"],
        "headers": {
          "pseudo_headers": {
            "method": "DELETE",
            "scheme": "https",
            "path": "/resource",
            "authority": "example.com"
          }
        }
      }
    ]
  },
  {
    "id": 182,
    "description": "The \":scheme\" and \":path\" pseudo-header fields MUST be omitted.",
    "client_frames": [
      {
        "type": "HEADERS",
        "stream_id": 1,
        "flags": ["END_HEADERS", "END_STREAM"],
        "headers": {
          "pseudo_headers": {
            "method": "CONNECT",
            "path": "/",
            "authority": "example.com:443"
          }
        }
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  },
  {
    "id": 117,
    "description": "A WINDOW_UPDATE frame with a length other than 4 octets MUST be treated as a connection error (Section 5.4.1) of type FRAME_SIZE_ERROR.",
    "client_frames": [
      {
        "type": "WINDOW_UPDATE",
        "stream_id": 0,
        "raw_payload": true,
        "force_length": 2,
        "increment": 1000
      }
    ],
    "server_frames": [
      {
        "type": "SETTINGS",
        "flags": [],
        "settings": {}
      }
    ]
  }
]
